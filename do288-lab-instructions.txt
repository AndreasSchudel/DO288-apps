
----------------------------------------------------------------------
lab trigger-builds start

source /usr/local/etc/ocp4.config

oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
oc new-project ${RHT_OCP4_DEV_USER}-trigger-builds

podman login -u ${RHT_OCP4_QUAY_USER} quay.io


cd /home/student/DO288/labs/trigger-builds
skopeo copy docker-archive:php-70-rhel7-original.tar.gz docker://quay.io/${RHT_OCP4_QUAY_USER}/php-70-rhel7:latest

oc create secret generic quay-registry --from-file .dockerconfigjson=${XDG_RUNTIME_DIR}/containers/auth.json --type kubernetes.io/dockerconfigjson
oc secrets link builder quay-registry

oc import-image php --from quay.io/${RHT_OCP4_QUAY_USER}/php-70-rhel7 --confirm

oc new-app --as-deployment-config --name trigger php~http://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps --context-dir trigger-builds

oc logs -f bc/trigger
oc get pods

oc describe bc/trigger | grep Triggered

skopeo copy docker-archive:php-70-rhel7-newer.tar.gz docker://quay.io/${RHT_OCP4_QUAY_USER}/php-70-rhel7:latest

oc import-image php

oc get builds
oc describe build trigger-2 | grep cause

cd ~
skopeo delete docker://quay.io/${RHT_OCP4_QUAY_USER}/php-70-rhel7

lab trigger-builds finish
----------------------------------------------------------------------


----------------------------------------------------------------------
lab post-commit start
-> does not work
lab post-commit finish
----------------------------------------------------------------------


----------------------------------------------------------------------
lab build-app start

source /usr/local/etc/ocp4.config
oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
oc new-project ${RHT_OCP4_DEV_USER}-build-app

cat ~/DO288/labs/build-app/oc-new-app.sh
~/DO288/labs/build-app/oc-new-app.sh

oc logs -f bc/simple
oc set env bc simple --list
oc set env bc simple npm_config_registry=http://${RHT_OCP4_NEXUS_SERVER}/repository/nodejs
oc set env bc simple --list
oc start-build simple -F

oc expose svc simple
oc get route/simple -o jsonpath='{.spec.host}{"\n"}'

oc get pods
curl simple-${RHT_OCP4_DEV_USER}-build-app.${RHT_OCP4_WILDCARD_DOMAIN}

oc describe bc simple
oc get bc simple -o jsonpath="{.spec.triggers[*].generic.secret}{'\n'}"
curl -X POST -k ${RHT_OCP4_MASTER_API}/apis/build.openshift.io/v1/namespaces/${RHT_OCP4_DEV_USER}-build-app/buildconfigs/simple/webhooks/ZYIdgpeyyL6P_Jwxn4Cs/generic

oc get builds
oc logs -f bc/simple
oc get pods

lab build-app grade
oc delete project ${RHT_OCP4_DEV_USER}-build-app
lab build-app finish
----------------------------------------------------------------------

----------------------------------------------------------------------
lab s2i-scripts start

sudo podman run --name test -it rhscl/httpd-24-rhel7 bash

cat /usr/libexec/s2i/assemble
cat /usr/libexec/s2i/run
cat /usr/libexec/s2i/usage

cd DO288-apps
git checkout master

cat /home/student/DO288-apps/s2i-scripts/index.html
ls -l /home/student/DO288-apps/s2i-scripts/.s2i/bin
cat /home/student/DO288-apps/s2i-scripts/.s2i/bin/assemble
cat /home/student/DO288-apps/s2i-scripts/.s2i/bin/run

source /usr/local/etc/ocp4.config
oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}

oc new-project ${RHT_OCP4_DEV_USER}-s2i-scripts
oc new-app --as-deployment-config --name bonjour httpd:2.4~https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps --context-dir s2i-scripts

oc logs -f bc/bonjour

oc get pods
oc expose svc bonjour
oc get route
curl http://bonjour-${RHT_OCP4_DEV_USER}-s2i-scripts.${RHT_OCP4_WILDCARD_DOMAIN}
curl http://bonjour-${RHT_OCP4_DEV_USER}-s2i-scripts.${RHT_OCP4_WILDCARD_DOMAIN}/info.html

oc logs bonjour-1-z627m

cd ~
oc delete project ${RHT_OCP4_DEV_USER}-s2i-scripts
sudo podman rm test

lab s2i-scripts finish
----------------------------------------------------------------------

----------------------------------------------------------------------
lab apache-s2i start

s2i version
s2i create s2i-do288-httpd s2i-do288-httpd
tree -a s2i-do288-httpd

cat ~/DO288/labs/apache-s2i/Dockerfile
cp ~/DO288/labs/apache-s2i/Dockerfile ~/s2i-do288-httpd/
cp -Rv ~/DO288/labs/apache-s2i/s2i ~/s2i-do288-httpd/
rm -f ~/s2i-do288-httpd/s2i/bin/save-artifacts
cd s2i-do288-httpd
sudo podman build -t s2i-do288-httpd .

sudo podman images
cat ~/DO288/labs/apache-s2i/index.html 
cp ~/DO288/labs/apache-s2i/index.html ~/s2i-do288-httpd/test/test-app/

mkdir /home/student/s2i-sample-app
s2i build test/test-app/ s2i-do288-httpd s2i-sample-app --as-dockerfile ~/s2i-sample-app/Dockerfile

cd ~/s2i-sample-app
tree .

cat Dockerfile
sudo podman build --format docker -t s2i-sample-app .
sudo podman images
sudo podman run --name test -u 1234 -p 8080:8080 -d s2i-sample-app
sudo podman ps

curl http://localhost:8080
sudo podman stop test

source /usr/local/etc/ocp4.config
sudo podman login -u ${RHT_OCP4_QUAY_USER} quay.io

sudo skopeo copy containers-storage:localhost/s2i-do288-httpd docker://quay.io/${RHT_OCP4_QUAY_USER}/s2i-do288-httpd

oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
oc new-project ${RHT_OCP4_DEV_USER}-apache-s2i

podman login -u ${RHT_OCP4_QUAY_USER} quay.io

oc create secret generic quayio --from-file .dockerconfigjson=${XDG_RUNTIME_DIR}/containers/auth.json --type=kubernetes.io/dockerconfigjson

oc secrets link builder quayio
oc import-image s2i-do288-httpd --from quay.io/${RHT_OCP4_QUAY_USER}/s2i-do288-httpd --confirm

oc get is
oc new-app --as-deployment-config --name hello-s2i s2i-do288-httpd~https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps --context-dir=html-helloworld

oc logs -f bc/hello-s2i
oc get pods
oc expose svc hello-s2i
oc get route/hello-s2i -o jsonpath='{.spec.host}{"\n"}'
curl http://hello-s2i-${RHT_OCP4_DEV_USER}-apache-s2i.${RHT_OCP4_WILDCARD_DOMAIN}

oc delete project ${RHT_OCP4_DEV_USER}-apache-s2i
sudo podman rm test
sudo podman rmi -f localhost/s2i-sample-app localhost/s2i-do288-httpd registry.access.redhat.com/ubi8/ubi:8.0
sudo skopeo delete docker://quay.io/${RHT_OCP4_QUAY_USER}/s2i-do288-httpd:latest
podman logout

lab apache-s2i finish
----------------------------------------------------------------------

----------------------------------------------------------------------
lab custom-s2i start

vi ~/DO288/labs/custom-s2i/Dockerfile
COPY ./s2i/bin/ /usr/libexec/s2i

cd ~/DO288/labs/custom-s2i
sudo podman build -t s2i-do288-go .
sudo podman images

mkdir /home/student/s2i-go-app
s2i build test/test-app/ s2i-do288-go s2i-go-app --as-dockerfile /home/student/s2i-go-app/Dockerfile
cd ~/s2i-go-app
sudo podman build -t s2i-go-app .
sudo podman images

sudo podman run --name go-test -u 1234  -p 8080:8080 -d s2i-go-app
sudo podman ps
curl http://localhost:8080/user1
sudo podman stop go-test

source /usr/local/etc/ocp4.config
sudo podman login -u ${RHT_OCP4_QUAY_USER} quay.io
sudo skopeo copy containers-storage:localhost/s2i-do288-go docker://quay.io/${RHT_OCP4_QUAY_USER}/s2i-do288-go

oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
oc new-project ${RHT_OCP4_DEV_USER}-custom-s2i
podman login -u ${RHT_OCP4_QUAY_USER} quay.io
oc create secret generic quayio --from-file .dockerconfigjson=${XDG_RUNTIME_DIR}/containers/auth.json --type=kubernetes.io/dockerconfigjson
oc secrets link builder quayio
oc import-image s2i-do288-go --from quay.io/${RHT_OCP4_QUAY_USER}/s2i-do288-go --confirm
oc get is

cd ~/DO288-apps
git checkout master

git checkout -b custom-s2i
git push -u origin custom-s2i
cd ~

oc new-app --as-deployment-config --name greet s2i-do288-go~https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps#custom-s2i --context-dir=go-hello

oc logs -f bc/greet
oc get pods
oc expose svc greet
oc get route/greet -o jsonpath='{.spec.host}{"\n"}'
curl http://greet-${RHT_OCP4_DEV_USER}-custom-s2i.${RHT_OCP4_WILDCARD_DOMAIN}/user1

mkdir -p ~/DO288-apps/go-hello/.s2i/bin
cp ~/DO288/labs/custom-s2i/s2i/bin/run ~/DO288-apps/go-hello/.s2i/bin/

vi ~/DO288-apps/go-hello/.s2i/bin/run
-> exec /opt/app-root/app --lang es

cd ~/DO288-apps/go-hello
git add .
git commit -m "Customized run script"
git push
cd ~

oc start-build greet
oc logs -f bc/greet
oc get pods
curl http://greet-${RHT_OCP4_DEV_USER}-custom-s2i.${RHT_OCP4_WILDCARD_DOMAIN}/user1

lab custom-s2i grade

oc delete project ${RHT_OCP4_DEV_USER}-custom-s2i
sudo podman rm go-test
sudo podman rmi -f localhost/s2i-go-app localhost/s2i-do288-go registry.access.redhat.com/ubi8/ubi:8.0
sudo skopeo delete docker://quay.io/${RHT_OCP4_QUAY_USER}/s2i-do288-go:latest

lab custom-s2i finish
----------------------------------------------------------------------

----------------------------------------------------------------------
lab create-template start

source /usr/local/etc/ocp4.config
oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
oc project ${RHT_OCP4_DEV_USER}-quotes-dev
oc status

oc get pvc
oc get route/quotesapi -o jsonpath='{.spec.host}{"\n"}'

cp ~/DO288/solutions/create-template/new-template.yaml ~/quotes-template-clean.yaml

cp ~/DO288/labs/create-template/is-clean.yaml /tmp/is-clean.yaml
cp ~/DO288/labs/create-template/bc-clean.yaml /tmp/bc-clean.yaml
cp ~/DO288/labs/create-template/dc-clean.yaml /tmp/dc-clean.yaml
cp ~/DO288/labs/create-template/svc-clean.yaml /tmp/svc-clean.yaml
cp ~/DO288/labs/create-template/route-clean.yaml /tmp/route-clean.yaml
cp ~/DO288/labs/create-template/pvc-clean.yaml /tmp/pvc-clean.yaml

oc get -o yaml --export is > /tmp/is.yaml
cp /tmp/is.yaml /tmp/is-clean.yaml
vi /tmp/is-clean.yaml

oc get -o yaml --export bc > /tmp/bc.yaml
cp /tmp/bc.yaml /tmp/bc-clean.yaml
vi /tmp/bc-clean.yaml

oc get -o yaml --export dc > /tmp/dc.yaml
cp /tmp/dc.yaml /tmp/dc-clean.yaml
vi /tmp/dc-clean.yaml

oc get -o yaml --export svc > /tmp/svc.yaml
cp /tmp/svc.yaml /tmp/svc-clean.yaml
vi /tmp/svc-clean.yaml

oc get -o yaml --export route > /tmp/route.yaml
cp /tmp/route.yaml /tmp/route-clean.yaml
vi /tmp/route-clean.yaml

oc get -o yaml --export pvc > /tmp/pvc.yaml
cp /tmp/pvc.yaml /tmp/pvc-clean.yaml
vi /tmp/pvc-clean.yaml

cat /tmp/is-clean.yaml >> ~/quotes-template-clean.yaml
cat /tmp/bc-clean.yaml >> ~/quotes-template-clean.yaml
cat /tmp/dc-clean.yaml >> ~/quotes-template-clean.yaml
cat /tmp/svc-clean.yaml >> ~/quotes-template-clean.yaml
cat /tmp/route-clean.yaml >> ~/quotes-template-clean.yaml
cat /tmp/pvc-clean.yaml >> ~/quotes-template-clean.yaml

cat ~/DO288/labs/create-template/parameters.yaml
cp ~/quotes-template-clean.yaml ~/quotes-template.yaml

cp ~/DO288/solutions/create-template/quotes-template.yaml ~/quotes-template.yaml

oc new-project ${RHT_OCP4_DEV_USER}-myquotes
oc new-app --file=quotes-template.yaml -p APP_GIT_URL=https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps -p PASSWORD=mypass

oc get pods
~/DO288/labs/create-template/populate-db.sh
oc get route/quotesapi -o jsonpath='{.spec.host}{"\n"}'
curl quotesapi-${RHT_OCP4_DEV_USER}-myquotes.${RHT_OCP4_WILDCARD_DOMAIN}/get.php

lab create-template finish
----------------------------------------------------------------------

----------------------------------------------------------------------
lab review-template start

cp ~/DO288/labs/review-template/todo-template.yaml ~/todo-template.yaml
vi ~/todo-template.yaml 
cp ~/DO288/solutions/review-template ~/todo-template.yaml

cp ~/DO288/labs/review-template/oc-new-app.sh ~/oc-new-app.sh
vi ~/oc-new-app.sh
cp ~/DO288/solutions/review-template/oc-new-app.sh ~/oc-new-app.sh

source /usr/local/etc/ocp4.config
oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
oc new-project ${RHT_OCP4_DEV_USER}-review-template

~/oc-new-app.sh
oc logs bc/todoapp -f
oc get pods
oc get route/todoapp -o jsonpath='{.spec.host}{"\n"}'
curl -siw "\n" http://${RHT_OCP4_DEV_USER}-todo.${RHT_OCP4_WILDCARD_DOMAIN}/todo/api/items-count

lab review-template grade
lab review-template finish
----------------------------------------------------------------------

----------------------------------------------------------------------
lab probes start

source /usr/local/etc/ocp4.config
oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}

oc new-project ${RHT_OCP4_DEV_USER}-probes
oc new-app --as-deployment-config --name probes --build-env npm_config_registry=http://${RHT_OCP4_NEXUS_SERVER}/repository/nodejs nodejs:12~https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps --context-dir probes

oc logs -f bc/probes
oc get pods
oc expose svc probes
curl -i probes-${RHT_OCP4_DEV_USER}-probes.${RHT_OCP4_WILDCARD_DOMAIN}/ready
curl -i probes-${RHT_OCP4_DEV_USER}-probes.${RHT_OCP4_WILDCARD_DOMAIN}/healthz
curl probes-${RHT_OCP4_DEV_USER}-probes.${RHT_OCP4_WILDCARD_DOMAIN}

oc set probe dc/probes --liveness --get-url=http://:8080/healthz --initial-delay-seconds=2 --timeout-seconds=2

oc set probe dc/probes --readiness --get-url=http://:8080/ready --initial-delay-seconds=2 --timeout-seconds=2

oc describe dc/probes
oc get pods
oc logs -f dc/probes

~/DO288/labs/probes/kill.sh
oc logs -f dc/probes
oc describe pod/probes-3-qgf5j 

oc delete project ${RHT_OCP4_DEV_USER}-probes

lab probes finish
----------------------------------------------------------------------

----------------------------------------------------------------------
lab strategy start

source /usr/local/etc/ocp4.config
oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
oc new-project ${RHT_OCP4_DEV_USER}-strategy
oc new-app --as-deployment-config --name mysql -e MYSQL_USER=test -e MYSQL_PASSWORD=redhat -e MYSQL_DATABASE=testdb --docker-image registry.access.redhat.com/rhscl/mysql-57-rhel7

oc get pods
oc get dc/mysql -o jsonpath='{.spec.strategy.type}{"\n"}'
oc set triggers dc/mysql --from-config --remove

oc patch dc/mysql --patch '{"spec":{"strategy":{"type":"Recreate"}}}'
oc patch dc/mysql --type=json -p='[{"op":"remove", "path": "/spec/strategy/rollingParams"}]'

cat ~/DO288/labs/strategy/users.sql
cat ~/DO288/labs/strategy/import.sh

cat ~/DO288/labs/strategy/post-hook.sh
~/DO288/labs/strategy/post-hook.sh

oc describe dc/mysql | grep -A 3 'Strategy:'
oc rollout latest dc/mysql
watch -n 2 oc get pods

oc logs mysql-2-hook-post
oc set env dc/mysql HOOK_RETRIES=5
oc rollout latest dc/mysql

watch -n 2 oc get pods
oc logs -f mysql-3-hook-post

oc get pods
oc rsh mysql-3-
mysql -u$MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE
mysql show tables;
select * from users;

exit

oc delete project ${RHT_OCP4_DEV_USER}-strategy
lab strategy finish
----------------------------------------------------------------------

----------------------------------------------------------------------
lab app-deploy start

cd ~/DO288-apps
git checkout master
git checkout -b app-deploy
git push -u origin app-deploy
cd ~

ls -l ~/DO288-apps/quip/src/main/java/com/redhat/training/example

source /usr/local/etc/ocp4.config
oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
oc new-project ${RHT_OCP4_DEV_USER}-app-deploy

oc new-app --as-deployment-config --name quip --build-env MAVEN_MIRROR_URL=http://${RHT_OCP4_NEXUS_SERVER}/repository/java -i redhat-openjdk18-openshift:1.5 https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps#app-deploy --context-dir quip

oc logs -f bc/quip
oc get pods
oc logs -f bc/quip
oc describe svc/quip

oc expose svc quip
oc get route/quip -o jsonpath='{.spec.host}{"\n"}'
curl http://quip-${RHT_OCP4_DEV_USER}-app-deploy.${RHT_OCP4_WILDCARD_DOMAIN}

oc set probe dc/quip --liveness --get-url=http://:8080/ready --initial-delay-seconds=30 --timeout-seconds=2
oc set probe dc/quip --readiness --get-url=http://:8080/ready --initial-delay-seconds=30 --timeout-seconds=2

oc describe dc/quip
oc get pods
oc describe pod quip-3-* | grep http-get

curl http://quip-${RHT_OCP4_DEV_USER}-app-deploy.${RHT_OCP4_WILDCARD_DOMAIN}

cat ~/DO288/labs/app-deploy/app-change.sh
~/DO288/labs/app-deploy/app-change.sh

oc start-build quip -F
oc get pods
curl http://quip-${RHT_OCP4_DEV_USER}-app-deploy.${RHT_OCP4_WILDCARD_DOMAIN}

oc rollback dc/quip
oc get pods
curl http://quip-${RHT_OCP4_DEV_USER}-app-deploy.${RHT_OCP4_WILDCARD_DOMAIN}

oc delete project ${RHT_OCP4_DEV_USER}-app-deploy
lab app-deploy finish
----------------------------------------------------------------------

----------------------------------------------------------------------
lab manage-deploy start

cd ~/DO288-apps
git checkout master
git checkout -b manage-deploy
git push -u origin manage-deploy

source /usr/local/etc/ocp4.config
oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
oc new-project ${RHT_OCP4_DEV_USER}-manage-deploy
oc new-app --as-deployment-config --name scale php:7.3~https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps#manage-deploy --context-dir php-scale

oc logs -f bc/scale
oc get pods
oc expose svc scale
oc get route scale -o jsonpath='{.spec.host}{"\n"}'
curl http://scale-${RHT_OCP4_DEV_USER}-manage-deploy.${RHT_OCP4_WILDCARD_DOMAIN}

oc describe dc/scale | grep 'Strategy'
oc get route console -n openshift-console -o jsonpath='{.spec.host}{"\n"}'

cat /usr/local/etc/ocp4.config
echo $RHT_OCP4_DEV_USER
echo $RHT_OCP4_DEV_PASSWORD

curl http://scale-${RHT_OCP4_DEV_USER}-manage-deploy.${RHT_OCP4_WILDCARD_DOMAIN}
curl http://scale-${RHT_OCP4_DEV_USER}-manage-deploy.${RHT_OCP4_WILDCARD_DOMAIN}

vi ~/DO288-apps/php-scale/index.php
<?php
  print "This is version 2 of the app. I am running on host...
?>

git commit -a -m "Updated app to version 2"
git push

oc rollback dc/scale
oc get pods
curl http://scale-${RHT_OCP4_DEV_USER}-manage-deploy.${RHT_OCP4_WILDCARD_DOMAIN}
curl http://scale-${RHT_OCP4_DEV_USER}-manage-deploy.${RHT_OCP4_WILDCARD_DOMAIN}

lab manage-deploy grade

oc delete project ${RHT_OCP4_DEV_USER}-manage-deploy
lab manage-deploy finish
----------------------------------------------------------------------

----------------------------------------------------------------------
lab simple-pipeline start

source /usr/local/etc/ocp4.config
oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
oc get templates -n openshift | grep jenkins

oc new-project ${RHT_OCP4_DEV_USER}-ci-cd
oc new-app  --as-deployment-config jenkins-ephemeral -p MEMORY_LIMIT=2048Mi

cat ~/DO288/labs/simple-pipeline/simple-pipeline.yaml
vi ~/DO288/labs/simple-pipeline/simple-pipeline.yaml
git:
  uri: "https://github.com/AndreasSchudel/DO288-apps"
  ref: "simple-pipeline"

cd ~/DO288-apps
git checkout master
git checkout -b simple-pipeline
git push -u origin simple-pipeline

vi ~/DO288-apps/simple-pipeline/Jenkinsfile
-> edit several lines

cd simple-pipeline
git commit -a -m "Completed Jenkinsfile"
git push
cd ~

oc get pods
oc get route/jenkins -o jsonpath='{.spec.host}{"\n"}'

oc new-project ${RHT_OCP4_DEV_USER}-simple-pipeline
oc policy add-role-to-user edit system:serviceaccount:${RHT_OCP4_DEV_USER}-ci-cd:jenkins -n ${RHT_OCP4_DEV_USER}-simple-pipeline
oc create -f ~/DO288/labs/simple-pipeline/simple-pipeline.yaml
oc get route console -n openshift-console -o jsonpath='{.spec.host}{"\n"}'

oc start-build simple-pipeline

oc delete project ${RHT_OCP4_DEV_USER}-simple-pipeline
lab simple-pipeline finish
----------------------------------------------------------------------

----------------------------------------------------------------------
lab custom-pipeline start

source /usr/local/etc/ocp4.config
oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
oc get pods -n ${RHT_OCP4_DEV_USER}-ci-cd

oc new-project ${RHT_OCP4_DEV_USER}-books-stage
oc new-project ${RHT_OCP4_DEV_USER}-books-dev

vi ~/DO288/labs/custom-pipeline/custom-pipeline-bc.json

cd ~/DO288-apps
git checkout master
git checkout -b custom-pipeline
git push -u origin custom-pipeline

vi ~/DO288-apps/books/jenkins/Jenkinsfile

agent {
  node {
    label 'nodejs'
  }
}

  DEV_PROJECT = "andreas-schudel-cloudops-books-dev"
  STAGE_PROJECT = "andreas-schudel-cloudops-books-stage"
  APP_GIT_URL = "https://github.com/AndreasSchudel/DO288-apps"
  NEXUS_SERVER = "http://nexus-common.apps.cluster.domain.example.com/repository/nodejs"

sh '''
        oc project ${DEV_PROJECT}
        oc new-app --as-deployment-config --name books nodejs:12~${APP_GIT_URL} \
        --build-env npm_config_registry=${NEXUS_SERVER} \
        --context-dir ${APP_NAME}

        oc expose svc/${APP_NAME}
   '''

script {
    openshift.withCluster() {
    openshift.tag("${DEV_PROJECT}/books:latest", "${STAGE_PROJECT}/books:stage")
  }
}

sh '''
      oc project ${STAGE_PROJECT}
      oc new-app --as-deployment-config --name books -i books:stage
      oc expose svc/${APP_NAME}
   '''
openshift.withProject( "${STAGE_PROJECT}" ) {
  def deployment = openshift.selector("dc", "${APP_NAME}").rollout()
  openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
    return (it.object().status.phase == "Running")
  }
}

cd ~/DO288-apps/books
git commit -a -m "Completed Jenkinsfile for books microservice"
git push
cd ~

oc get route/jenkins -n ${RHT_OCP4_DEV_USER}-ci-cd -o jsonpath='{.spec.host}{"\n"}'

Jenkins:
andreas-schudel-cloudops-books-dev

oc policy add-role-to-user edit system:serviceaccount:${RHT_OCP4_DEV_USER}-ci-cd:jenkins -n ${RHT_OCP4_DEV_USER}-books-dev
oc policy add-role-to-user edit system:serviceaccount:${RHT_OCP4_DEV_USER}-ci-cd:jenkins -n ${RHT_OCP4_DEV_USER}-books-stage

oc create -f ~/DO288/labs/custom-pipeline/custom-pipeline-bc.json
oc start-build custom-pipeline

vi ~/DO288-apps/books/tests/app_test.js
cd ~/DO288-apps/books
git commit -a -m "Fixed failed unit test."
git push
cd ~

oc start-build custom-pipeline

vi ~/DO288-apps/books/routes/authors.js
cd ~/DO288-apps/books
git commit -a -m "Fixed linting errors."
git push
cd ~

oc start-build custom-pipeline

oc get pods -n ${RHT_OCP4_DEV_USER}-books-dev
oc get pods -n ${RHT_OCP4_DEV_USER}-books-stage
oc get route/books -n ${RHT_OCP4_DEV_USER}-books-dev -o jsonpath='{.spec.host}{"\n"}'

oc delete project ${RHT_OCP4_DEV_USER}-books-dev
oc delete project ${RHT_OCP4_DEV_USER}-books-stage
oc delete project ${RHT_OCP4_DEV_USER}-ci-cd

lab custom-pipeline finish
----------------------------------------------------------------------

----------------------------------------------------------------------
lab review-cicd start

source /usr/local/etc/ocp4.config
oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
oc new-project ${RHT_OCP4_DEV_USER}-jenkins
oc new-app --as-deployment-config jenkins-ephemeral -p MEMORY_LIMIT=2048Mi

oc get pods
oc get route/jenkins -o jsonpath='{.spec.host}{"\n"}'

-> Jenkins:
- Configure sync plugin: andreas-schudel-cloudops-movies-dev

oc new-project ${RHT_OCP4_DEV_USER}-movies-stage
oc new-project ${RHT_OCP4_DEV_USER}-movies-dev

vi ~/DO288/labs/review-cicd/movies-bc.json
-> https://github.com/AndreasSchudel/DO288-apps

cd ~/DO288-apps
git checkout master
git checkout -b review-cicd
git push -u origin review-cicd
cd ~

cat ~/DO288-apps/movies/Jenkinsfile
cp ~/DO288/solutions/review-cicd/Jenkinsfile ~/DO288-apps/movies/Jenkinsfile
vi ~/DO288-apps/movies/Jenkinsfile

RHT_OCP4_MASTER_API=https://api.eu45.prod.nextcle.com:6443
RHT_OCP4_WILDCARD_DOMAIN=apps.eu45.prod.nextcle.com
RHT_OCP4_NEXUS_SERVER=nexus-common.apps.eu45.prod.nextcle.com
RHT_OCP4_DEV_USER=andreas-schudel-cloudops
RHT_OCP4_DEV_PASSWORD=a9253bce924d43128dc8
RHT_OCP4_GITHUB_USER=AndreasSchudel
RHT_OCP4_QUAY_USER=andreasschudel

cd ~/DO288-apps/movies
git commit -a -m "Completed Jenkinsfile for movies microservice"
git push
cd ~

oc project ${RHT_OCP4_DEV_USER}-movies-dev
oc policy add-role-to-user edit system:serviceaccount:${RHT_OCP4_DEV_USER}-jenkins:jenkins -n ${RHT_OCP4_DEV_USER}-movies-dev
oc policy add-role-to-user edit system:serviceaccount:${RHT_OCP4_DEV_USER}-jenkins:jenkins -n ${RHT_OCP4_DEV_USER}-movies-stage

oc create -f ~/DO288/labs/review-cicd/movies-bc.json
oc get route console -n openshift-console -o jsonpath='{.spec.host}{"\n"}'

oc start-build movies-pipeline

vi ~/DO288-apps/movies/src/test/java/com/redhat/movies/MoviesApplicationTests.java

Assert.assertEquals(7, movies.size());
-> Assert.assertEquals(6, movies.size());
Assert.assertEquals("Ready", response.getBody());
-> Assert.assertEquals("OK", response.getBody());

cd ~/DO288-apps/movies
git commit -a -m "Fixed failed unit test."
git push
cd ~

oc start-build movies-pipeline

vi ~/DO288-apps/movies/src/main/java/com/redhat/movies/MoviesController.java

Delete:
import java.io.File;
private String flag = "READY";

cd ~/DO288-apps/movies
git commit -a -m "Removed unused imports and variables."
git push
cd ~

oc start-build movies-pipeline

oc get pods -n ${RHT_OCP4_DEV_USER}-movies-dev
oc get pods -n ${RHT_OCP4_DEV_USER}-movies-stage

oc get route/movies -n ${RHT_OCP4_DEV_USER}-movies-dev -o jsonpath='{.spec.host}{"\n"}'
curl movies-${RHT_OCP4_DEV_USER}-movies-dev.${RHT_OCP4_WILDCARD_DOMAIN}/movies


lab review-cicd grade

oc delete project ${RHT_OCP4_DEV_USER}-movies-dev
oc delete project ${RHT_OCP4_DEV_USER}-movies-stage
oc delete project ${RHT_OCP4_DEV_USER}-jenkins

lab review-cicd finish
----------------------------------------------------------------------

----------------------------------------------------------------------
lab external-service start

source /usr/local/etc/ocp4.config
oc project ${RHT_OCP4_DEV_USER}-external-service
oc status

oc get pod
oc rsh todoapp-1-5rxvt env | grep DATABASE

HOSTNAME=$(oc get route todoapp -o jsonpath='{.spec.host}')
echo ${HOSTNAME}
curl -si http://${HOSTNAME}/todo/api/items/6

dbhost=$(echo mysql.ocp-${RHT_OCP4_WILDCARD_DOMAIN#"apps."})
echo ${dbhost}

mysqlshow -h${dbhost} -utodoapp -predhat123 todo

oc create svc externalname tododb --external-name ${dbhost}
oc get svc
curl -si http://${HOSTNAME}/todo/api/items/6

oc delete project ${RHT_OCP4_DEV_USER}-external-service
lab external-service finish
----------------------------------------------------------------------

----------------------------------------------------------------------
lab nexus-service start

cd ~/DO288-apps/nexus3
git checkout master

grep VOLUME Dockerfile
grep NEXUS_DATA Dockerfile
grep ENV Dockerfile

source /usr/local/etc/ocp4.config
sudo podman build -t nexus3 .
sudo podman login -u ${RHT_OCP4_QUAY_USER} quay.io
sudo skopeo copy containers-storage:localhost/nexus3 docker://quay.io/${RHT_OCP4_QUAY_USER}/nexus3

if build takes more than 5 minutes:
sudo skopeo copy docker://quay.io/redhattraining/nexus3:latest docker://quay.io/${RHT_OCP4_QUAY_USER}/nexus3

cp ~/DO288/labs/nexus-service/nexus-template.yaml ~/nexus-template.yaml
cd ~

grep -A1 "kind: DockerImage" ~/nexus-template.yaml 
grep -B1 -A5 limits: ~/nexus-template.yaml

vi ~/nexus-template.yaml

        - env:
            - name: INSTALL4J_ADD_VM_PARAMS
              value: -Djava.util.prefs.userRoot=/nexus-data/javaprefs

          livenessProbe:
            exec:
              command:
              - /bin/sh
              - "-c"
              - >
               curl -siu admin:$(cat /nexus-data/admin.password)
               http://localhost:8081/service/metrics/healthcheck |
               grep healthy | grep true
            ...output omitted...
            initialDelaySeconds: 120
            ...output omitted...
            timeoutSeconds: 30

          readinessProbe:
            exec:
              command:
              - /bin/sh
              - "-c"
              - >
               curl -siu admin:$(cat /nexus-data/admin.password)
               http://localhost:8081/service/metrics/ping |
               grep pong
            ...output omitted...
            initialDelaySeconds: 120
            ...output omitted...
            timeoutSeconds: 30


          volumeMounts:
          - mountPath: /nexus-data
            name: nexus-data

        volumes:
        - name: nexus-data
          persistentVolumeClaim:
            claimName: nexus-data-pvc

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: ${NEXUS_SERVICE_NAME}
    name: nexus-data-pvc

oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
oc new-project ${RHT_OCP4_DEV_USER}-nexus-service

podman login -u ${RHT_OCP4_QUAY_USER} quay.io
oc create secret generic quayio --from-file .dockerconfigjson=${XDG_RUNTIME_DIR}/containers/auth.json --type kubernetes.io/dockerconfigjson
oc secrets link default quayio --for pull

oc new-app --as-deployment-config --name nexus3 -f ~/nexus-template.yaml -p HOSTNAME=nexus-${RHT_OCP4_DEV_USER}.${RHT_OCP4_WILDCARD_DOMAIN}

oc get pods
oc get route

oc delete project ${RHT_OCP4_DEV_USER}-nexus-service
skopeo delete docker://quay.io/${RHT_OCP4_QUAY_USER}/nexus3
lab nexus-service finish
----------------------------------------------------------------------


----------------------------------------------------------------------
lab micro-java start

cd ~/DO288-apps/micro-java
git checkout master
git checkout -b micro-config
git push -u origin micro-config

ls -l src/main/java/com/redhat/training/openshift/hello
cat src/main/java/com/redhat/training/openshift/hello/JaxRsActivator.java
cat src/main/java/com/redhat/training/openshift/hello/HelloResource.java
cat pom.xml

mvn clean
mvn fabric8:resource
cat target/classes/META-INF/fabric8/openshift/hello-deploymentconfig.yml
cat target/classes/META-INF/fabric8/openshift/hello-service.yml
cat target/classes/META-INF/fabric8/openshift/hello-route.yml
cat target/classes/META-INF/fabric8/openshift/openshift.yml

source /usr/local/etc/ocp4.config
oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
oc new-project ${RHT_OCP4_DEV_USER}-micro-java

mvn fabric8:deploy
oc status
oc get pods

ROUTE_URL=$(oc get route hello --template='{{.spec.host}}') 
curl ${ROUTE_URL}/api/hello

cat ~/DO288/labs/micro-java/cm.yml
cat ~/DO288/labs/micro-java/deployment.yml

cp -v ~/DO288/labs/micro-java/*.yml ./src/main/fabric8/
git add src/main/fabric8/*.yml
git commit -am "Add YAML fragments."

mvn fabric8:deploy
oc get cm/env-config
oc get pods
curl ${ROUTE_URL}/api/hello

oc delete project ${RHT_OCP4_DEV_USER}-micro-java
lab micro-java finish
----------------------------------------------------------------------

----------------------------------------------------------------------
lab todo-migrate start

source /usr/local/etc/ocp4.config
MYSQL_DB=$(echo mysql.ocp-${RHT_OCP4_WILDCARD_DOMAIN#"apps."})
mysql -h${MYSQL_DB} -utodoapp -predhat123 todo
exit

oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
oc new-project ${RHT_OCP4_DEV_USER}-todo-migrate
oc create service externalname tododb --external-name ${MYSQL_DB}
oc get svc

cd ~/DO288-apps
git checkout master
git checkout -b todo-migrate
git push -u origin todo-migrate
cd todo-api-micro

mvn fabric8:deploy
oc get pods
oc logs  --follow

cp ~/DO288/solutions/todo-migrate/cm.yml src/main/fabric8
cp ~/DO288/solutions/todo-migrate/deployment.yml src/main/fabric8

mvn fabric8:resource-apply
oc describe dc/todo-api | grep -A1 "Environment Variables"
oc get configmap
oc get pods
oc logs  --follow

ROUTE_URL=$(oc get route todo-api --template={{.spec.host}})
curl -s ${ROUTE_URL}/todo/api/items/6 | python -m json.tool

git add src/main/fabric8/*
git commit -m "add YAML fragments"
git push origin todo-migrate


lab todo-migrate grade

lab todo-migrate finish
----------------------------------------------------------------------

----------------------------------------------------------------------
lab review-dockerfile start

cd ~/DO288-apps
git checkout master

git checkout -b review-dockerfile
git push -u origin review-dockerfile

vi ~/DO288-apps/todo-frontend/Dockerfile
cp ~/DO288/solutions/review-dockerfile/Dockerfile-optimized ~/DO288-apps/todo-frontend/Dockerfile

vi ~/DO288-apps/todo-frontend/Dockerfile
cp ~/DO288/solutions/review-dockerfile/Dockerfile-default-scc ~/DO288-apps/todo-frontend/Dockerfile

cd todo-frontend
sudo podman build -t todo-frontend .
sudo podman images
sudo podman run --name testfrontend -d -p 8080:8080 todo-frontend

curl -s localhost:8080 | grep h1
sudo podman stop testfrontend
sudo podman rm testfrontend

git commit -a -m 'Fixed for OpenShift'
git push

cd ~
source /usr/local/etc/ocp4.config
sudo podman login -u ${RHT_OCP4_QUAY_USER} quay.io
sudo skopeo copy containers-storage:localhost/todo-frontend docker://quay.io/${RHT_OCP4_QUAY_USER}/todo-frontend

oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
oc new-project ${RHT_OCP4_DEV_USER}-review-common

podman login -u ${RHT_OCP4_QUAY_USER} quay.io
oc create secret generic quayio --from-file .dockerconfigjson=${XDG_RUNTIME_DIR}/containers/auth.json --type kubernetes.io/dockerconfigjson
oc import-image todo-frontend --confirm --reference-policy local --from quay.io/${RHT_OCP4_QUAY_USER}/todo-frontend

oc new-project ${RHT_OCP4_DEV_USER}-review-dockerfile
oc policy add-role-to-group -n ${RHT_OCP4_DEV_USER}-review-common system:image-puller system:serviceaccounts:${RHT_OCP4_DEV_USER}-review-dockerfile
oc new-app --as-deployment-config --name frontend -e BACKEND_HOST=api.example.com -i ${RHT_OCP4_DEV_USER}-review-common/todo-frontend

oc get pods
oc expose svc frontend
oc get routes

curl -s http://frontend-${RHT_OCP4_DEV_USER}-review-dockerfile.${RHT_OCP4_WILDCARD_DOMAIN} | grep h1

lab review-dockerfile grade

lab review-dockerfile start
----------------------------------------------------------------------

----------------------------------------------------------------------
lab review-service start

source /usr/local/etc/ocp4.config
oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
oc new-project ${RHT_OCP4_DEV_USER}-review-service

oc new-app --as-deployment-config --name tododb --docker-image registry.access.redhat.com/rhscl/mysql-57-rhel7 -e MYSQL_USER=todoapp -e MYSQL_PASSWORD=mypass -e MYSQL_DATABASE=todo

oc get pods
oc set triggers dc/tododb --from-config --remove
oc create secret generic tododb --from-literal user=todoapp --from-literal password=mypass

oc set env dc/tododb --prefix MYSQL_ --from secret/tododb
oc set env dc/tododb --list

oc rollout latest dc/tododb
oc get pod
oc rsh tododb-2-dgxwm env | grep MYSQL_

cd ~/DO288-apps
git checkout master
git checkout -b review-service
git push -u origin review-service

mkdir -p ~/DO288-apps/todo-backend/.s2i/bin
cp ~/DO288/labs/review-service/lifecycle.sh ~/DO288-apps/todo-backend/.s2i/bin/assemble
oc describe istag nodejs:12 -n openshift | grep io.openshift.s2i.scripts-url

vi ~/DO288-apps/todo-backend/.s2i/bin/assemble

cd ~/DO288-apps/todo-backend
git add .s2i
git commit -m 'Add custom assemble script'
git push
cd ~

oc new-app --as-deployment-config --name backend --build-env npm_config_registry=http://${RHT_OCP4_NEXUS_SERVER}/repository/nodejs -e DATABASE_NAME=todo -e DATABASE_USER=todoapp -e DATABASE_PASSWORD=mypass -e DATABASE_SVC=tododb --context-dir todo-backend nodejs:12~https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps#review-service

oc logs -f bc/backend
oc get pods
oc set triggers dc/backend --from-config --remove
oc set env dc/backend --prefix DATABASE_ --from secret/tododb
oc set env dc/backend --list

oc create cm todoapp --from-literal init=true
oc set env dc/backend --prefix=DATABASE_ --from=cm/todoapp
oc set env dc/backend --list

oc rollout latest dc/backend
oc get pods
oc rsh backend-2-1bjrv env | grep DATABASE_

oc expose svc backend
oc get route
curl -si backend-${RHT_OCP4_DEV_USER}-review-service.${RHT_OCP4_WILDCARD_DOMAIN}/todo/api/items-count

oc port-forward tododb-2-dgxwm 30306:3306
# 2. terminal:
mysqlshow -utodoapp -pmypass -h127.0.0.1 -P30306 todo

lab review-service grade
lab review-service finish
----------------------------------------------------------------------

----------------------------------------------------------------------
lab review-multicontainer start

cp ~/DO288/labs/review-multicontainer/todoapp.yaml ~/todoapp.yaml
grep '^  kind:' ~/todoapp.yaml

vi ~/todoapp.yaml

oc process --parameters -f ~/todoapp.yaml

source /usr/local/etc/ocp4.config
oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}

oc get template nodejs-mongodb-example -n openshift -o yaml | less



lab review-multicontainer grade
lab review-multicontainer finish
----------------------------------------------------------------------








